import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, VotingClassifier, BaggingClassifier, AdaBoostClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

iris = load_iris()
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
xgb_clf = XGBClassifier(random_state=42)
bagging_clf = BaggingClassifier(base_estimator=rf_clf, n_estimators=100, random_state=42)
adaboost_clf = AdaBoostClassifier(base_estimator=xgb_clf, n_estimators=100, random_state=42)
voting_clf = VotingClassifier(estimators=[('rf', rf_clf), ('xgb', xgb_clf), ('bagging', bagging_clf), ('adaboost', adaboost_clf)])

rf_clf.fit(X_train, y_train)
xgb_clf.fit(X_train, y_train)
bagging_clf.fit(X_train, y_train)
adaboost_clf.fit(X_train, y_train)
voting_clf.fit(X_train, y_train)

rf_pred = rf_clf.predict(X_test)
xgb_pred = xgb_clf.predict(X_test)
bagging_pred = bagging_clf.predict(X_test)
adaboost_pred = adaboost_clf.predict(X_test)
voting_pred = voting_clf.predict(X_test)

rf_acc = accuracy_score(y_test, rf_pred)
xgb_acc = accuracy_score(y_test, xgb_pred)
bagging_acc = accuracy_score(y_test, bagging_pred)
adaboost_acc = accuracy_score(y_test, adaboost_pred)
voting_acc = accuracy_score(y_test, voting_pred)

print('Random Forest accuracy:', rf_acc)
print('XGBoost accuracy:', xgb_acc)
print('Bagging accuracy:', bagging_acc)
print('AdaBoost accuracy:', adaboost_acc)
print('Voting Classifier accuracy:', voting_acc)
